@using Proyecto.Application.DTOs
@model IEnumerable<Proyecto.Application.DTOs.FacturaDTO>

@{
    ViewData["Title"] = "Anular Factura";
}

<h1>AnularFacturaIndex</h1>


<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.IdFactura)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IdTarjeta)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IdCliente)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TajetaNumero)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.EstadoFactura)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.IdFactura)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.IdTarjeta)
                </td>
                <td>
                    @{
                        //leemos el viewbag con los clientes y despues hacemos un diccionario con el id y nombre
                        // que es mucho mejor que usar un for para recorrer cliente por cliente
                        var clientesList = ((IEnumerable<ClienteDTO>)ViewBag.clientes).ToList();
                        var clienteDict = clientesList.ToDictionary(c => c.IdCliente, c => c.Nombre);
                    }
                    @{
                        //preguntamos si el diccionario lo tiene
                        if (clienteDict.ContainsKey(item.IdCliente))
                        {
                            @clienteDict[item.IdCliente]
                        }
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TajetaNumero)
                </td>
                <td>
                    @{
                        var estadoText = item.EstadoFactura ? "Activo" : "Inactivo";
                        var estadoColor = item.EstadoFactura ? "green" : "red";
                    }
                    <span style="color: @estadoColor">
                        @Html.Raw("<strong>" + estadoText + "</strong>")
                    </span>
                </td>
                <td>
                    @Html.ActionLink("Cambiar Estado", "CambiarEstado", new { id = item.IdFactura }, new { @class = "btn btn-success  " }) 
                </td>
            </tr>
        }
    </tbody>
</table>
